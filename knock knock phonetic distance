{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOrLd2SnL1p3Bdq7koWHHOc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142},"id":"4Udt5-UFBom9","executionInfo":{"status":"ok","timestamp":1670529360179,"user_tz":300,"elapsed":114566,"user":{"displayName":"Vanessa Sheu","userId":"09796642928287019619"}},"outputId":"02befa3b-3e36-4617-f1a3-96efa6f56a93"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-082a38bc-4aeb-4f9b-b610-5dc37ee4e975\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-082a38bc-4aeb-4f9b-b610-5dc37ee4e975\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving dictionary.txt to dictionary.txt\n","Saving similarityC.txt to similarityC.txt\n","Saving similarityV.txt to similarityV.txt\n"]}],"source":["# Upload the CMU dictionary \"dictionary.txt\" and the consonant/vowel similarity metrics \"similarityC\" and \"similarityV\" as .txt files\n","from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","source":["###final version###\n","\n","import itertools\n","import numpy as np\n","\n","###CALCULATE CONSONANT DIFFERENCE VALUES###\n","DIFF_ROW=[]\n","DIFF_COL=[]\n","DIFF_ARRAY=[]\n","DIFF_INDEX=[]\n","vectC_file = open('similarityC.txt')\n","for line in vectC_file:     #search through each line in the text file\n","  line=line.strip()\n","  word = line.split(',')\n","  DIFF_ROW.append(word)\n","\n","DIFF_COL = DIFF_ROW.copy()\n","\n","for a in range(len(DIFF_ROW)):\n","   row = np.array(DIFF_ROW[a][1:])\n","   row = list(map(int, row))\n","   for b in range(len(DIFF_COL)):\n","      col = np.array(DIFF_COL[b][1:])\n","      col = list(map(int, col))\n","      raw_diff = np.subtract(row,col)\n","      diff = [abs(ele) for ele in raw_diff]\n","      DIFF_ARRAY.append(diff)\n","      index = str(DIFF_ROW[a][0]) + \",\" + str(DIFF_ROW[b][0])\n","      DIFF_INDEX.append(index)\n","\n","###CALCULATE VOWEL DIFFERENCE VALUES###\n","vDIFF_ROW=[]\n","vDIFF_COL=[]\n","vDIFF_ARRAY=[]\n","vDIFF_INDEX=[]\n","vectV_file = open('similarityV.txt')\n","for line in vectV_file:     #search through each line in the text file\n","  line=line.strip()\n","  word = line.split(',')\n","  vDIFF_ROW.append(word)\n","\n","vDIFF_COL = vDIFF_ROW.copy()\n","\n","for a in range(len(vDIFF_ROW)):\n","   row = np.array(vDIFF_ROW[a][1:])\n","   row = list(map(int, row))\n","   for b in range(len(vDIFF_COL)):\n","      col = np.array(vDIFF_COL[b][1:])\n","      col = list(map(int, col))\n","      raw_diff = np.subtract(row,col)\n","      diff = [abs(ele) for ele in raw_diff]\n","      vDIFF_ARRAY.append(diff)\n","      index = str(vDIFF_ROW[a][0]) + \",\" + str(vDIFF_ROW[b][0])\n","      vDIFF_INDEX.append(index)\n","\n","###INPUT LINE3/LINE5 AND CONVERT TO PHONES###\n","\n","line3 = input('Line 3: ').upper() #convert all input to uppercase to correspond with dictionary\n","line5 = input('Line 5: ').upper()\n","word1 = line3.split()\n","word2 = line5.split()\n","\n","LINE3 = ['unavailable']*len(word1)\n","LINE5 = ['unavailable']*len(word2)\n","NUCLEUS1 = []\n","NUCLEUS2 = []\n","STRESS1 = []\n","STRESS2 = []\n","POS=[]\n","print (word1, word2)\n","\n","count = 1\n","for n in range(len(word1)):\n","  raw_file = open('dictionary.txt')\n","  for line in raw_file:     #search through each line in the text file\n","    line=line.strip()\n","    word = line.split()\n","    if word1[n] == word[0]:\n","      for m in word[1:]:  # changes the ER to AH R #\n","        if len(m) > 2:\n","          if m[:(len(m)-1)] == 'ER':\n","            POS.append(word.index(m))\n","            word[word.index(m)] = 'AH'+m[len(m)-1:]\n","      for i in POS:\n","        word.insert(i+count,'R')\n","        count = count + 1\n","        print (word[1:])\n","      LINE3[n] = word[1:]\n","\n","PHONES3 = [item for sublist in LINE3 for item in sublist]     #flatten lists of phonemes into single list\n","for h in range(len(PHONES3)):   #remove numbers indicating stress for vowel search\n","        if len(PHONES3[h]) > 2:\n","          STRESS1.append(PHONES3[h][len(PHONES3[h])-1:])    #make list of stress values\n","          col = list(map(int, col))\n","          PHONES3[h] = PHONES3[h][:len(PHONES3[h])-1]\n","\n","POS.clear()\n","count = 1\n","for n in range(len(word2)):\n","  raw_file = open('dictionary.txt')\n","  for line in raw_file:     #search through each line in the text file\n","    line=line.strip()\n","    word = line.split()\n","    if word2[n] == word[0]:\n","      for m in word[1:]:  # changes the ER to AH R #\n","        if len(m) > 2:\n","          if m[:(len(m)-1)] == 'ER':\n","            POS.append(word.index(m))\n","            word[word.index(m)] = 'AH'+m[len(m)-1:]\n","      for i in POS:\n","        word.insert(i+count,'R')\n","        count = count + 1\n","        print (word[1:])\n","      LINE5[n] = word[1:]\n","PHONES5 = [item for sublist in LINE5 for item in sublist]     #flatten lists of phonemes into single list\n","for h in range(len(PHONES5)):   #remove numbers indicating stress for vowel search\n","        if len(PHONES5[h]) > 2:\n","          STRESS2.append(PHONES5[h][len(PHONES5[h])-1:])    #make list of stress values\n","          PHONES5[h] = PHONES5[h][:len(PHONES5[h])-1]\n","\n","VOWELS = ['AA', 'AE', 'AH', 'AO', 'AW', 'AX', 'AXR', 'AY', 'EH', 'ER', 'EY', 'IH', 'IX', 'IY', 'OW', 'OY', 'UH', 'UW', 'UX']\n","CONSONANTS = ['B', 'CH', 'D', 'DH', 'DX', 'EL', 'EM', 'EN', 'F', 'G', 'HH', 'JH', 'K', 'L', 'M', 'N', 'NG', 'P', 'Q', 'R', 'S', 'SH', 'T', 'TH', 'V', 'W', 'Y', 'Z', 'ZH']\n","CONS1=[]\n","CONS2=[]\n","C_VEC1=[]\n","C_VEC2=[]\n","\n","print (\"Phones list: \", PHONES3,PHONES5)\n","\n","###SEGMENTS INTO SYLLABLES###\n","VOWEL1 = []\n","VOWEL2 = []\n","for i in range(len(PHONES3)):\n","  for vowel in VOWELS:\n","      if PHONES3[i] == vowel:\n","        NUCLEUS1.append(i) #this tells you the position of the vowels so you can segment the syllables\n","        VOWEL1.append(PHONES3[i])  #this creates a list of vowels\n","print (\"vowels list 1: \", VOWEL1)\n","\n","for j in range(len(NUCLEUS1)):\n","      if j == 0 and (NUCLEUS1[0] != 0):  #for the first NUCLEUS1, the syllable is everything up to the NUCLEUS1\n","        syll_start = NUCLEUS1[j]\n","        CONS1.append(PHONES3[:syll_start])\n","      if j != 0:  #for all other nuclei except the last, the syllable is everything up to the present NUCLEUS1 from the previous NUCLEUS1 \n","        syll_start = NUCLEUS1[j-1]\n","        syll_end = NUCLEUS1[j]\n","        CONS1.append(PHONES3[syll_start+1:syll_end])\n","      if NUCLEUS1[j] == max(NUCLEUS1) and NUCLEUS1[j] != len(PHONES3)-1:\n","        syll_start = NUCLEUS1[j]\n","        CONS1.append(PHONES3[syll_start+1:])\n","print (\"consonant list 1: \", CONS1)\n","\n","for i in range(len(PHONES5)):\n","  for vowel in VOWELS:\n","      if PHONES5[i] == vowel:\n","        NUCLEUS2.append(i) #this tells you the position of the vowels so you can segment the syllables\n","        VOWEL2.append(PHONES5[i])  #this creates a list of vowels\n","print (\"vowels list 2: \", VOWEL2)\n","\n","for j in range(len(NUCLEUS2)):\n","      if j == 0 and (NUCLEUS1[0] != 0):  #for the first NUCLEUS2, the syllable is everything up to the NUCLEUS2\n","        syll_start = NUCLEUS2[j]\n","        CONS2.append(PHONES5[:syll_start])\n","      if j != 0:  #for all other nuclei except the last, the syllable is everything up to the present NUCLEUS2 from the previous NUCLEUS2\n","        syll_start = NUCLEUS2[j-1]\n","        syll_end = NUCLEUS2[j]\n","        CONS2.append(PHONES5[syll_start+1:syll_end])\n","      if NUCLEUS2[j] == max(NUCLEUS2) and NUCLEUS2[j] != len(PHONES5)-1:\n","        syll_start = NUCLEUS2[j]\n","        CONS2.append(PHONES5[syll_start+1:])\n","print (\"consonant list 2: \", CONS2)\n","\n","\n","###DELETE EXTRA CONSONANTS AND VOWELS###\n","MINLIST=[]\n","MAXLIST=[]\n","MINLISTV=[]\n","MAXLISTV=[]\n","SYLL_PENALTY = []\n","\n","minlen = min(len(CONS1),len(CONS2))\n","if len(CONS1) == minlen:\n","  MINLIST = CONS1.copy()\n","  MAXLIST = CONS2.copy()\n","else:\n","  MINLIST = CONS2.copy()\n","  MAXLIST = CONS1.copy()\n","\n","minlen = min(len(VOWEL1),len(VOWEL2))\n","if len(VOWEL1) == minlen:\n","  MINLISTV = VOWEL1.copy()\n","  MAXLISTV = VOWEL2.copy()\n","else:\n","  MINLISTV = VOWEL2.copy()\n","  MAXLISTV = VOWEL1.copy()\n","\n","\n","c_penalty = (len(MAXLIST)-len(MINLIST)) * 10\n","if c_penalty > 0:\n","  print (\" \")\n","  print (\"oops--unequal number of consonants. Penalty: \", c_penalty)\n","  SYLL_PENALTY.append(c_penalty)\n","v_penalty = (len(MAXLISTV)-len(MINLISTV)) * 20\n","if v_penalty > 0:\n","  print (\" \")\n","  print (\"oops--unequal number of vowels. Penalty: \" , v_penalty)\n","  SYLL_PENALTY.append(v_penalty)\n","\n","SUM = []\n","KEEPLETTER = []\n","CAND1 = []\n","CAND2 = []\n","COMP = []\n","COMPKEY = []\n","MAXCOMP = []\n","MAXCOMPKEY = []\n","PENALTY=[]\n","\n","for m in range(min(len(CONS1), len(CONS2))):    #this assumes your lists are equal length (i.e. same syllables) before you search\n","  if CONS1[m] == CONS2[m]:                      #if onsets the same, no penalty\n","    print (CONS1[m], \"yay!\")\n","  if CONS1[m] != CONS2[m]:   #if onsets are different\n","    print (\"oops--\", CONS1[m], \" isn't equivalent to\", CONS2[m])\n","    if len(CONS1[m]) != len(CONS2[m]): #and they are different lengths:\n","      minlen = min(len(CONS1[m]), len(CONS2[m]))\n","      if len(CONS1[m]) == minlen:\n","        MINSLOT = CONS1[m]\n","        MAXSLOT = CONS2[m]\n","        # MAXSLOT = [item for sublist in MAXSLOT for item in sublist]\n","        # MINSLOT = [item for sublist in MINSLOT for item in sublist]\n","        ONSET = MAXSLOT.copy()\n","        ONSET2 = MINSLOT.copy()\n","      else:\n","        MINSLOT = CONS2[m]\n","        MAXSLOT = CONS1[m]\n","        # MAXSLOT = [item for sublist in MAXSLOT for item in sublist]\n","        # MINSLOT = [item for sublist in MINSLOT for item in sublist]\n","        ONSET = MAXSLOT.copy()\n","        ONSET2 = MINSLOT.copy()\n","\n","      DEL_MIN = MINSLOT.copy()    #find out if simple deletion is appropriate\n","      DEL_MAX = MAXSLOT.copy()\n","      COUNT = DEL_MIN.copy()\n","      for i in DEL_MIN: \n","        if i in DEL_MAX:\n","          print (\"match!\", i)\n","          COUNT.remove(i)\n","          PENALTY.append(10)\n","      if len(COUNT) == 0:\n","        print (\"Deletion possible! Penalty: \", sum(PENALTY))\n","      else:                     #if deletion doesn't work and we have to use phonetic similarity:\n","        PENALTY.clear()\n","        print (\"Deletion not possible! Clusters are different lengths with some letters in common\")\n","        for k in MINSLOT:   #different lengths: if there are some letters in common, keep those                           \n","              for l in MAXSLOT:\n","                if k == l:\n","                  print (\"Yes there is \", k, \" in \", MAXSLOT)\n","                  KEEPLETTER.append(k)\n","        if len(KEEPLETTER) > 0:\n","            print (\"non-candidate!: \", KEEPLETTER)\n","            for i in KEEPLETTER:\n","              if i in MAXSLOT:\n","                MAXSLOT.remove(i)\n","                print (\"removed! \", MAXSLOT)\n","                CAND1 = MAXSLOT\n","              if i in MINSLOT:\n","                MINSLOT.remove(i)\n","                print ('removed! ', MINSLOT)\n","                CAND2 = MINSLOT\n","            for m in CAND1:\n","              for n in CAND2:\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                MAXCOMP.append(diff)\n","                MAXCOMPKEY.append(m)\n","            for counting in range(len(CAND1) - len(CAND2)):\n","              print (\"counting: \", counting)\n","              maxdiff = max(MAXCOMP)\n","              loc = MAXCOMP.index(maxdiff)\n","              print (\"Removing phone\", MAXCOMPKEY[loc], \" :\", maxdiff)\n","              print (\"from current onset: \", ONSET)\n","              print (MAXCOMPKEY[loc])\n","              if COMPKEY[loc] in ONSET:\n","                ONSET.remove(COMPKEY[loc])\n","                COMP.remove(maxdiff)\n","                print (\"Penalty: -10\")\n","                PENALTY.append(10)\n","              print (\"New onset\", ONSET)\n","            for l in range(len(ONSET)): #for edited onset, calculating regular distance\n","                print (ONSET, ONSET2)\n","                m = ONSET[l]\n","                n = ONSET2[l]\n","                print (m, n)               \n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                COMP.append(diff)\n","                COMPKEY.append(m)\n","        else: #different lengths: if there are no letters in common\n","            CAND1 = MAXSLOT\n","            CAND2 = MINSLOT\n","            print (\"clusters are different lengths with nothing in common: \", CAND1)\n","            print (\"clusters are different lengths with nothing in common: \", CAND2)\n","            for m in CAND1:\n","              for n in CAND2:\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                MAXCOMP.append(diff)\n","                MAXCOMPKEY.append(m)\n","            for counting in range(len(CAND1) - len(CAND2)):\n","              maxdiff = max(MAXCOMP)\n","              loc = MAXCOMP.index(maxdiff)\n","              print (\"Removing phone\", MAXCOMPKEY[loc], \" :\", maxdiff)\n","              print (\"from current onset: \", ONSET)\n","              if MAXCOMPKEY[loc] in ONSET:\n","                ONSET.remove(MAXCOMPKEY[loc])\n","                MAXCOMP.remove(maxdiff)\n","                print (\"Penalty: -10\")\n","                PENALTY.append(10)\n","              print (ONSET)\n","            for l in range(len(ONSET)): #for edited onset, calculating regular distance\n","              print (\"Final onset: \")\n","              print (ONSET, ONSET2)\n","              m = ONSET[l]\n","              n = ONSET2[l]\n","              print (m, n)               \n","              key = str(m)+\",\"+str(n)\n","              print (key)\n","              loc = DIFF_INDEX.index(key)\n","              print (DIFF_ARRAY[loc])\n","              diff = sum(DIFF_ARRAY[loc])\n","              print (\"difference is: \",diff)\n","              COMP.append(diff)\n","              COMPKEY.append(m)\n","    else: #if onsets are same length but different letters\n","            CAND1 = CONS1[m]\n","            CAND2 = CONS2[m]\n","            print (\"clusters are same length but different letters: \", CAND1)\n","            print (\"clusters are same length but different letters: \", CAND2)\n","            for l in range(len(CAND1)):\n","                m = CAND1[l]\n","                n = CAND2[l]\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                COMP.append(diff)\n","                COMPKEY.append(m)\n","\n","### CALCULATE VOWEL SIMILARITY ###\n","vCOMP = []\n","vCOMPKEY = []\n","print (VOWEL1, VOWEL2)\n","for l in range(min(len(VOWEL1), len(VOWEL2))): #for edited onset, calculating regular distance\n","    m = VOWEL1[l]\n","    n = VOWEL2[l]             \n","    key = str(m)+\",\"+str(n)\n","    print (key)\n","    loc = vDIFF_INDEX.index(key)\n","    print (vDIFF_ARRAY[loc])\n","    diff = sum(vDIFF_ARRAY[loc])\n","    print (\"difference is: \",diff)\n","    vCOMP.append(diff)\n","    vCOMPKEY.append(m)\n","\n","###CALCULATE STRESS PENALTIES###\n","DIFF_STRESS=[]\n","STRESS1 = list(map(int, STRESS1))\n","STRESS2 = list(map(int, STRESS2))\n","\n","for i in range(min(len(STRESS1), len(STRESS2))):\n","  sdiff = STRESS1[i] - STRESS2[i]\n","  sdiff = abs(sdiff)\n","  DIFF_STRESS.append(sdiff)\n","\n","print (\" \")\n","print (\"Word-final vowel/consonant deletion penalty: \", sum(SYLL_PENALTY))\n","print (\"Consonant phonetic dissimilarity: \", COMP, \"= total: \", (sum(COMP)))\n","print (\"Consonant deletion penalty: \", sum(PENALTY))\n","print (\"Vowel phonetic dissimilarity: \", vCOMP, \"= total\", (sum(vCOMP)), \"x2: \", (sum(vCOMP)*2))\n","print (\"Stress penalties: \", sum(DIFF_STRESS))\n","print (\"FINAL WEIGHTED DISSIMILARITY: \", (sum(vCOMP)*2)+sum(COMP)+sum(DIFF_STRESS)+sum(PENALTY)+sum(SYLL_PENALTY)) #weight vowels x2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a3p1FcSZXoTM","outputId":"83382d90-022d-4a94-cd31-3b5ad6df14c1"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Line 3: heard\n"]}]},{"cell_type":"code","source":["###final version (prepped for word masking)###\n","\n","import itertools\n","import numpy as np\n","\n","###CALCULATE CONSONANT DIFFERENCE VALUES###\n","DIFF_ROW=[]\n","DIFF_COL=[]\n","DIFF_ARRAY=[]\n","DIFF_INDEX=[]\n","vectC_file = open('similarityC.txt')\n","for line in vectC_file:     #search through each line in the text file\n","  line=line.strip()\n","  word = line.split(',')\n","  DIFF_ROW.append(word)\n","\n","DIFF_COL = DIFF_ROW.copy()\n","\n","for a in range(len(DIFF_ROW)):\n","   row = np.array(DIFF_ROW[a][1:])\n","   row = list(map(int, row))\n","   for b in range(len(DIFF_COL)):\n","      col = np.array(DIFF_COL[b][1:])\n","      col = list(map(int, col))\n","      raw_diff = np.subtract(row,col)\n","      diff = [abs(ele) for ele in raw_diff]\n","      DIFF_ARRAY.append(diff)\n","      index = str(DIFF_ROW[a][0]) + \",\" + str(DIFF_ROW[b][0])\n","      DIFF_INDEX.append(index)\n","\n","###CALCULATE VOWEL DIFFERENCE VALUES###\n","vDIFF_ROW=[]\n","vDIFF_COL=[]\n","vDIFF_ARRAY=[]\n","vDIFF_INDEX=[]\n","vectV_file = open('similarityV.txt')\n","for line in vectV_file:     #search through each line in the text file\n","  line=line.strip()\n","  word = line.split(',')\n","  vDIFF_ROW.append(word)\n","\n","vDIFF_COL = vDIFF_ROW.copy()\n","\n","for a in range(len(vDIFF_ROW)):\n","   row = np.array(vDIFF_ROW[a][1:])\n","   row = list(map(int, row))\n","   for b in range(len(vDIFF_COL)):\n","      col = np.array(vDIFF_COL[b][1:])\n","      col = list(map(int, col))\n","      raw_diff = np.subtract(row,col)\n","      diff = [abs(ele) for ele in raw_diff]\n","      vDIFF_ARRAY.append(diff)\n","      index = str(vDIFF_ROW[a][0]) + \",\" + str(vDIFF_ROW[b][0])\n","      vDIFF_INDEX.append(index)\n","\n","###INPUT LINE3/LINE5 AND CONVERT TO PHONES###\n","line3 = input('Line 3: ').upper() #convert all input to uppercase to correspond with dictionary\n","line5 = input('Line 5: ').upper()\n","word1 = line3.split()\n","word2 = line5.split()\n","\n","LINE3 = ['unavailable']*len(word1)\n","LINE5 = ['unavailable']*len(word2)\n","NUCLEUS1 = []\n","NUCLEUS2 = []\n","STRESS1 = []\n","STRESS2 = []\n","POS=[]\n","print (word1, word2)\n","\n","count = 1\n","for n in range(len(word1)):\n","  raw_file = open('dictionary.txt')\n","  for line in raw_file:     #search through each line in the text file\n","    line=line.strip()\n","    word = line.split()\n","    if word1[n] == word[0]:\n","      for m in word[1:]:  # changes the ER to AH R #\n","        POS.clear()\n","        if len(m) > 2:\n","          if m[:(len(m)-1)] == 'ER':\n","            POS.append(word.index(m))\n","            word[word.index(m)] = 'AH'+m[len(m)-1:]\n","        for i in POS:\n","          word.insert(i+count,'R')\n","          count = count + 1\n","        LINE3[n] = word[1:]\n","\n","PHONES3 = [item for sublist in LINE3 for item in sublist]     #flatten lists of phonemes into single list\n","for h in range(len(PHONES3)):   #remove numbers indicating stress for vowel search\n","        if len(PHONES3[h]) > 2:\n","          STRESS1.append(PHONES3[h][len(PHONES3[h])-1:])    #make list of stress values\n","          PHONES3[h] = PHONES3[h][:len(PHONES3[h])-1]\n","\n","count = 1\n","for n in range(len(word2)):\n","  if n == 5:\n","    break\n","  raw_file = open('dictionary.txt')\n","  for line in raw_file:     #search through each line in the text file\n","    line=line.strip()\n","    word = line.split()\n","    if word2[n] == word[0]:\n","      for m in word[1:]:  # changes the ER to AH R #\n","        POS.clear()\n","        if len(m) > 2:\n","          if m[:(len(m)-1)] == 'ER':\n","            POS.append(word.index(m))\n","            word[word.index(m)] = 'AH'+m[len(m)-1:]\n","        for i in POS:\n","          word.insert(i+count,'R')\n","          count = count + 1\n","        LINE5[n] = word[1:]\n","\n","###IDENTIFY TARGET WORD FOR MASKING###\n","total = 0\n","for i in range(len(LINE5)):\n","  total = total + len(LINE5[i])\n","  print (total, LINE5[i])\n","  if total >= (len(PHONES3)):\n","    target = (word2[:i+1])\n","    context = (word2[i+1:])\n","    break\n","delimiter = \" \"\n","context = delimiter.join(context)\n","context = context.lower()\n","PHONES5 = target\n","target = delimiter.join(target)\n","target = target.lower()\n","\n","print (\"This is the target\", target, \"This is the context: \", context)\n","\n","\n","PHONES5 = [item for sublist in PHONES5 for item in sublist]     #flatten lists of phonemes into single list\n","for h in range(len(PHONES5)):   #remove numbers indicating stress for vowel search\n","        if len(PHONES5[h]) > 2:\n","          STRESS2.append(PHONES5[h][len(PHONES5[h])-1:])    #make list of stress values\n","          PHONES5[h] = PHONES5[h][:len(PHONES5[h])-1]\n","\n","print (\"Phones list: \", PHONES3, PHONES5)\n","\n","###SEGMENTS INTO SYLLABLES###\n","CONS1=[]\n","CONS2=[]\n","VOWEL1 = []\n","VOWEL2 = []\n","\n","VOWELS = ['AA', 'AE', 'AH', 'AO', 'AW', 'AX', 'AXR', 'AY', 'EH', 'ER', 'EY', 'IH', 'IX', 'IY', 'OW', 'OY', 'UH', 'UW', 'UX']\n","CONSONANTS = ['B', 'CH', 'D', 'DH', 'DX', 'EL', 'EM', 'EN', 'F', 'G', 'HH', 'JH', 'K', 'L', 'M', 'N', 'NG', 'P', 'Q', 'R', 'S', 'SH', 'T', 'TH', 'V', 'W', 'Y', 'Z', 'ZH']\n","\n","for i in range(len(PHONES3)):\n","  for vowel in VOWELS:\n","      if PHONES3[i] == vowel:\n","        NUCLEUS1.append(i) #this tells you the position of the vowels so you can segment the syllables\n","        VOWEL1.append(PHONES3[i])  #this creates a list of vowels\n","print (\"vowels list 1: \", VOWEL1)\n","\n","for j in range(len(NUCLEUS1)):\n","      if j == 0 and (NUCLEUS1[0] != 0):  #for the first NUCLEUS1, the syllable is everything up to the NUCLEUS1\n","        syll_start = NUCLEUS1[j]\n","        CONS1.append(PHONES3[:syll_start])\n","      if j != 0:  #for all other nuclei except the last, the syllable is everything up to the present NUCLEUS1 from the previous NUCLEUS1 \n","        syll_start = NUCLEUS1[j-1]\n","        syll_end = NUCLEUS1[j]\n","        CONS1.append(PHONES3[syll_start+1:syll_end])\n","      if NUCLEUS1[j] == max(NUCLEUS1) and NUCLEUS1[j] != len(PHONES3)-1:\n","        syll_start = NUCLEUS1[j]\n","        CONS1.append(PHONES3[syll_start+1:])\n","print (\"consonant list 1: \", CONS1)\n","\n","for i in range(len(PHONES5)):\n","  for vowel in VOWELS:\n","      if PHONES5[i] == vowel:\n","        NUCLEUS2.append(i) #this tells you the position of the vowels so you can segment the syllables\n","        VOWEL2.append(PHONES5[i])  #this creates a list of vowels\n","print (\"vowels list 2: \", VOWEL2)\n","\n","for j in range(len(NUCLEUS2)):\n","      if j == 0 and (NUCLEUS1[0] != 0):  #for the first NUCLEUS2, the syllable is everything up to the NUCLEUS2\n","        syll_start = NUCLEUS2[j]\n","        CONS2.append(PHONES5[:syll_start])\n","      if j != 0:  #for all other nuclei except the last, the syllable is everything up to the present NUCLEUS2 from the previous NUCLEUS2\n","        syll_start = NUCLEUS2[j-1]\n","        syll_end = NUCLEUS2[j]\n","        CONS2.append(PHONES5[syll_start+1:syll_end])\n","      if NUCLEUS2[j] == max(NUCLEUS2) and NUCLEUS2[j] != len(PHONES5)-1:\n","        syll_start = NUCLEUS2[j]\n","        CONS2.append(PHONES5[syll_start+1:])\n","print (\"consonant list 2: \", CONS2)\n","\n","###DELETE EXTRA CONSONANTS AND VOWELS###\n","MINLIST=[]\n","MAXLIST=[]\n","MINLISTV=[]\n","MAXLISTV=[]\n","SYLL_PENALTY = []\n","\n","minlen = min(len(CONS1),len(CONS2)) #penalize for extra consonants\n","if len(CONS1) == minlen:\n","  MINLIST = CONS1.copy()\n","  MAXLIST = CONS2.copy()\n","else:\n","  MINLIST = CONS2.copy()\n","  MAXLIST = CONS1.copy()\n","\n","minlen = min(len(VOWEL1),len(VOWEL2)) #penalize for extra vowels\n","if len(VOWEL1) == minlen:\n","  MINLISTV = VOWEL1.copy()\n","  MAXLISTV = VOWEL2.copy()\n","else:\n","  MINLISTV = VOWEL2.copy()\n","  MAXLISTV = VOWEL1.copy()\n","\n","\n","c_penalty = (len(MAXLIST)-len(MINLIST)) * 10\n","if c_penalty > 0:\n","  print (\" \")\n","  print (\"oops--unequal number of consonants. Penalty: \", c_penalty)\n","  SYLL_PENALTY.append(c_penalty)\n","v_penalty = (len(MAXLISTV)-len(MINLISTV)) * 20\n","if v_penalty > 0:\n","  print (\" \")\n","  print (\"oops--unequal number of vowels. Penalty: \" , v_penalty)\n","  SYLL_PENALTY.append(v_penalty)\n","\n","SUM = []\n","KEEPLETTER = []\n","CAND1 = []\n","CAND2 = []\n","COMP = []\n","COMPKEY = []\n","MAXCOMP = []\n","MAXCOMPKEY = []\n","PENALTY=[]\n","\n","for m in range(min(len(CONS1), len(CONS2))):    #this assumes your lists are equal length (i.e. same syllables) before you search\n","  if CONS1[m] == CONS2[m]:                      #if onsets the same, no penalty\n","    print (CONS1[m], \"yay!\")\n","  if CONS1[m] != CONS2[m]:   #if onsets are different\n","    print (\"oops--\", CONS1[m], \" isn't equivalent to\", CONS2[m])\n","    if len(CONS1[m]) != len(CONS2[m]): #and they are different lengths:\n","      minlen = min(len(CONS1[m]), len(CONS2[m]))\n","      if len(CONS1[m]) == minlen:\n","        MINSLOT = CONS1[m]\n","        MAXSLOT = CONS2[m]\n","        # MAXSLOT = [item for sublist in MAXSLOT for item in sublist]\n","        # MINSLOT = [item for sublist in MINSLOT for item in sublist]\n","        ONSET = MAXSLOT.copy()\n","        ONSET2 = MINSLOT.copy()\n","      else:\n","        MINSLOT = CONS2[m]\n","        MAXSLOT = CONS1[m]\n","        # MAXSLOT = [item for sublist in MAXSLOT for item in sublist]\n","        # MINSLOT = [item for sublist in MINSLOT for item in sublist]\n","        ONSET = MAXSLOT.copy()\n","        ONSET2 = MINSLOT.copy()\n","\n","      DEL_MIN = MINSLOT.copy()    #find out if simple deletion is appropriate\n","      DEL_MAX = MAXSLOT.copy()\n","      COUNT = DEL_MIN.copy()\n","      for i in DEL_MIN: \n","        if i in DEL_MAX:\n","          print (\"match!\", i)\n","          COUNT.remove(i)\n","          PENALTY.append(10)\n","      if len(COUNT) == 0:\n","        print (\"Deletion possible! Penalty: \", sum(PENALTY))\n","      else:                     #if deletion doesn't work and we have to use phonetic similarity:\n","        PENALTY.clear()\n","        print (\"Deletion not possible! Clusters are different lengths with some letters in common\")\n","        for k in MINSLOT:   #different lengths: if there are some letters in common, keep those                           \n","              for l in MAXSLOT:\n","                if k == l:\n","                  print (\"Yes there is \", k, \" in \", MAXSLOT)\n","                  KEEPLETTER.append(k)\n","        if len(KEEPLETTER) > 0:\n","            print (\"non-candidate!: \", KEEPLETTER)\n","            for i in KEEPLETTER:\n","              if i in MAXSLOT:\n","                MAXSLOT.remove(i)\n","                print (\"removed! \", MAXSLOT)\n","                CAND1 = MAXSLOT\n","              if i in MINSLOT:\n","                MINSLOT.remove(i)\n","                print ('removed! ', MINSLOT)\n","                CAND2 = MINSLOT\n","            for m in CAND1:\n","              for n in CAND2:\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                MAXCOMP.append(diff)\n","                MAXCOMPKEY.append(m)\n","            for counting in range(len(CAND1) - len(CAND2)):\n","              print (\"counting: \", counting)\n","              maxdiff = max(MAXCOMP)\n","              loc = MAXCOMP.index(maxdiff)\n","              print (\"Removing phone\", MAXCOMPKEY[loc], \" :\", maxdiff)\n","              print (\"from current onset: \", ONSET)\n","              print (MAXCOMPKEY[loc])\n","              if COMPKEY[loc] in ONSET:\n","                ONSET.remove(COMPKEY[loc])\n","                COMP.remove(maxdiff)\n","                print (\"Penalty: -10\")\n","                PENALTY.append(10)\n","              print (\"New onset\", ONSET)\n","            for l in range(len(ONSET)): #for edited onset, calculating regular distance\n","                print (ONSET, ONSET2)\n","                m = ONSET[l]\n","                n = ONSET2[l]\n","                print (m, n)               \n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                COMP.append(diff)\n","                COMPKEY.append(m)\n","        else: #different lengths: if there are no letters in common\n","            CAND1 = MAXSLOT\n","            CAND2 = MINSLOT\n","            print (\"clusters are different lengths with nothing in common: \", CAND1)\n","            print (\"clusters are different lengths with nothing in common: \", CAND2)\n","            for m in CAND1:\n","              for n in CAND2:\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                MAXCOMP.append(diff)\n","                MAXCOMPKEY.append(m)\n","            for counting in range(len(CAND1) - len(CAND2)):\n","              maxdiff = max(MAXCOMP)\n","              loc = MAXCOMP.index(maxdiff)\n","              print (\"Removing phone\", MAXCOMPKEY[loc], \" :\", maxdiff)\n","              print (\"from current onset: \", ONSET)\n","              if MAXCOMPKEY[loc] in ONSET:\n","                ONSET.remove(MAXCOMPKEY[loc])\n","                MAXCOMP.remove(maxdiff)\n","                print (\"Penalty: -10\")\n","                PENALTY.append(10)\n","              print (ONSET)\n","            for l in range(len(ONSET)): #for edited onset, calculating regular distance\n","              print (\"Final onset: \")\n","              print (ONSET, ONSET2)\n","              m = ONSET[l]\n","              n = ONSET2[l]\n","              print (m, n)               \n","              key = str(m)+\",\"+str(n)\n","              print (key)\n","              loc = DIFF_INDEX.index(key)\n","              print (DIFF_ARRAY[loc])\n","              diff = sum(DIFF_ARRAY[loc])\n","              print (\"difference is: \",diff)\n","              COMP.append(diff)\n","              COMPKEY.append(m)\n","    else: #if onsets are same length but different letters\n","            CAND1 = CONS1[m]\n","            CAND2 = CONS2[m]\n","            print (\"clusters are same length but different letters: \", CAND1)\n","            print (\"clusters are same length but different letters: \", CAND2)\n","            for l in range(len(CAND1)):\n","                m = CAND1[l]\n","                n = CAND2[l]\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                COMP.append(diff)\n","                COMPKEY.append(m)\n","\n","### CALCULATE VOWEL SIMILARITY ###\n","vCOMP = []\n","vCOMPKEY = []\n","print (VOWEL1, VOWEL2)\n","for l in range(min(len(VOWEL1), len(VOWEL2))): #for edited onset, calculating regular distance\n","    m = VOWEL1[l]\n","    n = VOWEL2[l]             \n","    key = str(m)+\",\"+str(n)\n","    print (key)\n","    loc = vDIFF_INDEX.index(key)\n","    print (vDIFF_ARRAY[loc])\n","    diff = sum(vDIFF_ARRAY[loc])\n","    print (\"difference is: \",diff)\n","    vCOMP.append(diff)\n","    vCOMPKEY.append(m)\n","\n","###CALCULATE STRESS PENALTIES###\n","DIFF_STRESS=[]\n","STRESS1 = list(map(int, STRESS1))\n","STRESS2 = list(map(int, STRESS2))\n","\n","for i in range(min(len(STRESS1), len(STRESS2))):\n","  sdiff = STRESS1[i] - STRESS2[i]\n","  sdiff = abs(sdiff)\n","  DIFF_STRESS.append(sdiff)\n","\n","print (\" \")\n","print (\"Word-final vowel/consonant deletion penalty: \", sum(SYLL_PENALTY))\n","print (\"Consonant phonetic dissimilarity: \", COMP, \"= total: \", (sum(COMP)))\n","print (\"Consonant deletion penalty: \", sum(PENALTY))\n","print (\"Vowel phonetic dissimilarity: \", vCOMP, \"= total\", (sum(vCOMP)), \"x2: \", (sum(vCOMP)*2))\n","print (\"Stress penalties: \", sum(DIFF_STRESS))\n","print (\"FINAL WEIGHTED DISSIMILARITY: \", (sum(vCOMP)*2)+sum(COMP)+sum(DIFF_STRESS)+sum(PENALTY)+sum(SYLL_PENALTY)) #weight vowels x2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IPXS1b8TuTUc","executionInfo":{"status":"ok","timestamp":1669992990022,"user_tz":300,"elapsed":5012,"user":{"displayName":"Vanessa Sheu","userId":"09796642928287019619"}},"outputId":"95ee1fc1-2002-4dd8-d778-b32558694bdf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Line 3: robin\n","Line 5: robbing\n","['ROBIN'] ['ROBBING']\n","5 ['R', 'AA1', 'B', 'IH0', 'NG']\n","This is the target robbing This is the context:  \n","Phones list:  ['R', 'AA', 'B', 'AH', 'N'] ['R', 'O', 'B', 'B', 'I', 'N', 'G']\n","vowels list 1:  ['AA', 'AH']\n","consonant list 1:  [['R'], ['B'], ['N']]\n","vowels list 2:  []\n","consonant list 2:  []\n"," \n","oops--unequal number of consonants. Penalty:  30\n"," \n","oops--unequal number of vowels. Penalty:  40\n","['AA', 'AH'] []\n"," \n","Word-final vowel/consonant deletion penalty:  70\n","Consonant phonetic dissimilarity:  [] = total:  0\n","Consonant deletion penalty:  0\n","Vowel phonetic dissimilarity:  [] = total 0 x2:  0\n","Stress penalties:  0\n","FINAL WEIGHTED DISSIMILARITY:  70\n"]}]},{"cell_type":"code","source":["###final version### - where 'ER' is parsed within the LINE and not PHONE level not to mess up the word count\n","\n","import itertools\n","import numpy as np\n","\n","###CALCULATE CONSONANT DIFFERENCE VALUES###\n","DIFF_ROW=[]\n","DIFF_COL=[]\n","DIFF_ARRAY=[]\n","DIFF_INDEX=[]\n","vectC_file = open('similarityC.txt')\n","for line in vectC_file:     #search through each line in the text file\n","  line=line.strip()\n","  word = line.split(',')\n","  DIFF_ROW.append(word)\n","\n","DIFF_COL = DIFF_ROW.copy()\n","\n","for a in range(len(DIFF_ROW)):\n","   row = np.array(DIFF_ROW[a][1:])\n","   row = list(map(int, row))\n","   for b in range(len(DIFF_COL)):\n","      col = np.array(DIFF_COL[b][1:])\n","      col = list(map(int, col))\n","      raw_diff = np.subtract(row,col)\n","      diff = [abs(ele) for ele in raw_diff]\n","      DIFF_ARRAY.append(diff)\n","      index = str(DIFF_ROW[a][0]) + \",\" + str(DIFF_ROW[b][0])\n","      DIFF_INDEX.append(index)\n","\n","###CALCULATE VOWEL DIFFERENCE VALUES###\n","vDIFF_ROW=[]\n","vDIFF_COL=[]\n","vDIFF_ARRAY=[]\n","vDIFF_INDEX=[]\n","vectV_file = open('similarityV.txt')\n","for line in vectV_file:     #search through each line in the text file\n","  line=line.strip()\n","  word = line.split(',')\n","  vDIFF_ROW.append(word)\n","\n","vDIFF_COL = vDIFF_ROW.copy()\n","\n","for a in range(len(vDIFF_ROW)):\n","   row = np.array(vDIFF_ROW[a][1:])\n","   row = list(map(int, row))\n","   for b in range(len(vDIFF_COL)):\n","      col = np.array(vDIFF_COL[b][1:])\n","      col = list(map(int, col))\n","      raw_diff = np.subtract(row,col)\n","      diff = [abs(ele) for ele in raw_diff]\n","      vDIFF_ARRAY.append(diff)\n","      index = str(vDIFF_ROW[a][0]) + \",\" + str(vDIFF_ROW[b][0])\n","      vDIFF_INDEX.append(index)\n","\n","###INPUT LINE3/LINE5 AND CONVERT TO PHONES###\n","\n","line3 = input('Line 3: ').upper() #convert all input to uppercase to correspond with dictionary\n","line5 = input('Line 5: ').upper()\n","word1 = line3.split()\n","word2 = line5.split()\n","\n","LINE3 = ['unavailable']*len(word1)\n","LINE5 = ['unavailable']*len(word2)\n","NUCLEUS1 = []\n","NUCLEUS2 = []\n","STRESS1 = []\n","STRESS2 = []\n","POS=[]\n","count = 1\n","\n","for n in range(len(word1)):\n","  raw_file = open('dictionary.txt')\n","  for line in raw_file:     #search through each line in the text file\n","    line=line.strip()\n","    word = line.split()\n","    if word1[n] == word[0]:\n","      for m in word[1:]:  # changes the ER to AH R #\n","        if len(m) > 2:\n","          if m[:(len(m)-1)] == 'ER':\n","            POS.append(word.index(m))\n","            word[word.index(m)] = 'AH'+m[len(m)-1:]\n","      for i in POS:\n","        word.insert(i+count,'R')\n","        count = count + 1\n","        print (word[1:])\n","      LINE3[n] = word[1:]\n","print(LINE3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VIFhG77riZu_","executionInfo":{"status":"ok","timestamp":1669992933312,"user_tz":300,"elapsed":5830,"user":{"displayName":"Vanessa Sheu","userId":"09796642928287019619"}},"outputId":"0021008b-558b-478f-d224-08c500830433"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Line 3: robin\n","Line 5: robbing\n","[['R', 'AA1', 'B', 'AH0', 'N']]\n"]}]},{"cell_type":"code","source":["###final version###\n","\n","import itertools\n","import numpy as np\n","\n","###CALCULATE CONSONANT DIFFERENCE VALUES###\n","DIFF_ROW=[]\n","DIFF_COL=[]\n","DIFF_ARRAY=[]\n","DIFF_INDEX=[]\n","vectC_file = open('similarityC.txt')\n","for line in vectC_file:     #search through each line in the text file\n","  line=line.strip()\n","  word = line.split(',')\n","  DIFF_ROW.append(word)\n","\n","DIFF_COL = DIFF_ROW.copy()\n","\n","for a in range(len(DIFF_ROW)):\n","   row = np.array(DIFF_ROW[a][1:])\n","   row = list(map(int, row))\n","   for b in range(len(DIFF_COL)):\n","      col = np.array(DIFF_COL[b][1:])\n","      col = list(map(int, col))\n","      raw_diff = np.subtract(row,col)\n","      diff = [abs(ele) for ele in raw_diff]\n","      DIFF_ARRAY.append(diff)\n","      index = str(DIFF_ROW[a][0]) + \",\" + str(DIFF_ROW[b][0])\n","      DIFF_INDEX.append(index)\n","\n","###CALCULATE VOWEL DIFFERENCE VALUES###\n","vDIFF_ROW=[]\n","vDIFF_COL=[]\n","vDIFF_ARRAY=[]\n","vDIFF_INDEX=[]\n","vectV_file = open('similarityV.txt')\n","for line in vectV_file:     #search through each line in the text file\n","  line=line.strip()\n","  word = line.split(',')\n","  vDIFF_ROW.append(word)\n","\n","vDIFF_COL = vDIFF_ROW.copy()\n","\n","for a in range(len(vDIFF_ROW)):\n","   row = np.array(vDIFF_ROW[a][1:])\n","   row = list(map(int, row))\n","   for b in range(len(vDIFF_COL)):\n","      col = np.array(vDIFF_COL[b][1:])\n","      col = list(map(int, col))\n","      raw_diff = np.subtract(row,col)\n","      diff = [abs(ele) for ele in raw_diff]\n","      vDIFF_ARRAY.append(diff)\n","      index = str(vDIFF_ROW[a][0]) + \",\" + str(vDIFF_ROW[b][0])\n","      vDIFF_INDEX.append(index)\n","\n","###INPUT LINE3/LINE5 AND CONVERT TO PHONES###\n","\n","line3 = input('Line 3: ').upper() #convert all input to uppercase to correspond with dictionary\n","line5 = input('Line 5: ').upper()\n","word1 = line3.split()\n","word2 = line5.split()\n","\n","LINE3 = ['unavailable']*len(word1)\n","LINE5 = ['unavailable']*len(word2)\n","NUCLEUS1 = []\n","NUCLEUS2 = []\n","STRESS1 = []\n","STRESS2 = []\n","\n","for n in range(len(word1)):\n","  raw_file = open('dictionary.txt')\n","  for line in raw_file:     #search through each line in the text file\n","    line=line.strip()\n","    word = line.split()\n","    if word1[n] == word[0]:\n","      LINE3[n] = (word[1:])\n","PHONES3 = [item for sublist in LINE3 for item in sublist]     #flatten lists of phonemes into single list\n","for h in range(len(PHONES3)):   #remove numbers indicating stress for vowel search\n","        if len(PHONES3[h]) > 2:\n","          STRESS1.append(PHONES3[h][len(PHONES3[h])-1:])    #make list of stress values\n","          col = list(map(int, col))\n","          PHONES3[h] = PHONES3[h][:len(PHONES3[h])-1]\n","\n","for n in range(len(word2)):\n","  raw_file = open('dictionary.txt')\n","  for line in raw_file:     #search through each line in the text file\n","    line=line.strip()\n","    word = line.split()\n","    if word2[n] == word[0]:\n","      LINE5[n] = (word[1:])\n","PHONES5 = [item for sublist in LINE5 for item in sublist]     #flatten lists of phonemes into single list\n","for h in range(len(PHONES5)):   #remove numbers indicating stress for vowel search\n","        if len(PHONES5[h]) > 2:\n","          STRESS2.append(PHONES5[h][len(PHONES5[h])-1:])    #make list of stress values\n","          PHONES5[h] = PHONES5[h][:len(PHONES5[h])-1]\n","\n","## changes the ER to AH R ##\n","POS=[]\n","for i in range(len(PHONES3)):\n","  if PHONES3[i] == 'ER':\n","    POS.append(i)\n","    PHONES3[i] = 'AH'\n","    count = 1\n","    for i in POS:\n","      PHONES3.insert(i+count,'R')\n","      count = count + 1\n","\n","for i in range(len(PHONES5)):\n","  if PHONES5[i] == 'ER':\n","    POS.append(i)\n","    PHONES5[i] = 'AH'\n","    count = 1\n","    for i in POS:\n","      PHONES5.insert(i+count,'R')\n","      count = count + 1\n","\n","VOWELS = ['AA', 'AE', 'AH', 'AO', 'AW', 'AX', 'AXR', 'AY', 'EH', 'ER', 'EY', 'IH', 'IX', 'IY', 'OW', 'OY', 'UH', 'UW', 'UX']\n","CONSONANTS = ['B', 'CH', 'D', 'DH', 'DX', 'EL', 'EM', 'EN', 'F', 'G', 'HH', 'JH', 'K', 'L', 'M', 'N', 'NG', 'P', 'Q', 'R', 'S', 'SH', 'T', 'TH', 'V', 'W', 'Y', 'Z', 'ZH']\n","CONS1=[]\n","CONS2=[]\n","C_VEC1=[]\n","C_VEC2=[]\n","\n","print (\"Phones list: \", PHONES3,PHONES5)\n","\n","###SEGMENTS INTO SYLLABLES###\n","VOWEL1 = []\n","VOWEL2 = []\n","for i in range(len(PHONES3)):\n","  for vowel in VOWELS:\n","      if PHONES3[i] == vowel:\n","        NUCLEUS1.append(i) #this tells you the position of the vowels so you can segment the syllables\n","        VOWEL1.append(PHONES3[i])  #this creates a list of vowels\n","print (\"vowels list 1: \", VOWEL1)\n","\n","for j in range(len(NUCLEUS1)):\n","      if j == 0 and (NUCLEUS1[0] != 0):  #for the first NUCLEUS1, the syllable is everything up to the NUCLEUS1\n","        syll_start = NUCLEUS1[j]\n","        CONS1.append(PHONES3[:syll_start])\n","      if j != 0:  #for all other nuclei except the last, the syllable is everything up to the present NUCLEUS1 from the previous NUCLEUS1 \n","        syll_start = NUCLEUS1[j-1]\n","        syll_end = NUCLEUS1[j]\n","        CONS1.append(PHONES3[syll_start+1:syll_end])\n","      if NUCLEUS1[j] == max(NUCLEUS1) and NUCLEUS1[j] != len(PHONES3)-1:\n","        syll_start = NUCLEUS1[j]\n","        CONS1.append(PHONES3[syll_start+1:])\n","print (\"consonant list 1: \", CONS1)\n","\n","for i in range(len(PHONES5)):\n","  for vowel in VOWELS:\n","      if PHONES5[i] == vowel:\n","        NUCLEUS2.append(i) #this tells you the position of the vowels so you can segment the syllables\n","        VOWEL2.append(PHONES5[i])  #this creates a list of vowels\n","print (\"vowels list 2: \", VOWEL2)\n","\n","for j in range(len(NUCLEUS2)):\n","      if j == 0 and (NUCLEUS1[0] != 0):  #for the first NUCLEUS2, the syllable is everything up to the NUCLEUS2\n","        syll_start = NUCLEUS2[j]\n","        CONS2.append(PHONES5[:syll_start])\n","      if j != 0:  #for all other nuclei except the last, the syllable is everything up to the present NUCLEUS2 from the previous NUCLEUS2\n","        syll_start = NUCLEUS2[j-1]\n","        syll_end = NUCLEUS2[j]\n","        CONS2.append(PHONES5[syll_start+1:syll_end])\n","      if NUCLEUS2[j] == max(NUCLEUS2) and NUCLEUS2[j] != len(PHONES5)-1:\n","        syll_start = NUCLEUS2[j]\n","        CONS2.append(PHONES5[syll_start+1:])\n","print (\"consonant list 2: \", CONS2)\n","\n","\n","###DELETE EXTRA CONSONANTS AND VOWELS###\n","MINLIST=[]\n","MAXLIST=[]\n","MINLISTV=[]\n","MAXLISTV=[]\n","SYLL_PENALTY = []\n","\n","minlen = min(len(CONS1),len(CONS2))\n","if len(CONS1) == minlen:\n","  MINLIST = CONS1.copy()\n","  MAXLIST = CONS2.copy()\n","else:\n","  MINLIST = CONS2.copy()\n","  MAXLIST = CONS1.copy()\n","\n","minlen = min(len(VOWEL1),len(VOWEL2))\n","if len(VOWEL1) == minlen:\n","  MINLISTV = VOWEL1.copy()\n","  MAXLISTV = VOWEL2.copy()\n","else:\n","  MINLISTV = VOWEL2.copy()\n","  MAXLISTV = VOWEL1.copy()\n","\n","\n","c_penalty = (len(MAXLIST)-len(MINLIST)) * 10\n","if c_penalty > 0:\n","  print (\" \")\n","  print (\"oops--unequal number of consonants. Penalty: \", c_penalty)\n","  SYLL_PENALTY.append(c_penalty)\n","v_penalty = (len(MAXLISTV)-len(MINLISTV)) * 20\n","if v_penalty > 0:\n","  print (\" \")\n","  print (\"oops--unequal number of vowels. Penalty: \" , v_penalty)\n","  SYLL_PENALTY.append(v_penalty)\n","\n","SUM = []\n","KEEPLETTER = []\n","CAND1 = []\n","CAND2 = []\n","COMP = []\n","COMPKEY = []\n","MAXCOMP = []\n","MAXCOMPKEY = []\n","PENALTY=[]\n","\n","for m in range(min(len(CONS1), len(CONS2))):    #make sure your lists are equal length (i.e. same syllables) before you search\n","  if CONS1[m] == CONS2[m]:                      #if onsets the same, no penalty\n","    print (CONS1[m], \"yay!\")\n","  if CONS1[m] != CONS2[m]:   #if onsets are different\n","    print (\"oops--\", CONS1[m], \" isn't equivalent to\", CONS2[m])\n","    if len(CONS1[m]) != len(CONS2[m]): #and they are different lengths:\n","      minlen = min(len(CONS1[m]), len(CONS2[m]))\n","      if len(CONS1[m]) == minlen:\n","        MINSLOT = CONS1[m]\n","        MAXSLOT = CONS2[m]\n","        MAXSLOT = [item for sublist in MAXSLOT for item in sublist]\n","        MINSLOT = [item for sublist in MINSLOT for item in sublist]\n","        ONSET = MAXSLOT.copy()\n","        ONSET2 = MINSLOT.copy()\n","      else:\n","        MINSLOT = CONS2[m]\n","        MAXSLOT = CONS1[m]\n","        MAXSLOT = [item for sublist in MAXSLOT for item in sublist]\n","        MINSLOT = [item for sublist in MINSLOT for item in sublist]\n","        ONSET = MAXSLOT.copy()\n","        ONSET2 = MINSLOT.copy()\n","\n","      DEL_MIN = MINSLOT.copy()    #find out if simple deletion is appropriate\n","      DEL_MAX = MAXSLOT.copy()\n","      COUNT = DEL_MIN.copy()\n","      for i in DEL_MIN: \n","        if i in DEL_MAX:\n","          print (\"match!\", i)\n","          COUNT.remove(i)\n","          PENALTY.append(10)\n","      if len(COUNT) == 0:\n","        print (\"Deletion possible! Penalty: \", sum(PENALTY))\n","      else:                     #if deletion doesn't work and we have to use phonetic similarity:\n","        PENALTY.clear()\n","        print (\"Deletion not possible! Clusters are different lengths with some letters in common\")\n","        for k in MINSLOT:   #different lengths: if there are some letters in common, keep those                           \n","              for l in MAXSLOT:\n","                if k == l:\n","                  print (\"Yes there is \", k, \" in \", MAXSLOT)\n","                  KEEPLETTER.append(k)\n","        if len(KEEPLETTER) > 0:\n","            print (\"non-candidate!: \", KEEPLETTER)\n","            for i in KEEPLETTER:\n","              if i in MAXSLOT:\n","                MAXSLOT.remove(i)\n","                print (\"removed! \", MAXSLOT)\n","                CAND1 = MAXSLOT\n","              if i in MINSLOT:\n","                MINSLOT.remove(i)\n","                print ('removed! ', MINSLOT)\n","                CAND2 = MINSLOT\n","            for m in CAND1:\n","              for n in CAND2:\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                MAXCOMP.append(diff)\n","                MAXCOMPKEY.append(m)\n","            for counting in range(len(CAND1) - len(CAND2)):\n","              print (\"counting: \", counting)\n","              maxdiff = max(MAXCOMP)\n","              loc = MAXCOMP.index(maxdiff)\n","              print (\"Removing phone\", MAXCOMPKEY[loc], \" :\", maxdiff)\n","              print (\"from current onset: \", ONSET)\n","              print (MAXCOMPKEY[loc])\n","              if COMPKEY[loc] in ONSET:\n","                ONSET.remove(COMPKEY[loc])\n","                COMP.remove(maxdiff)\n","                print (\"Penalty: -10\")\n","                PENALTY.append(10)\n","              print (\"New onset\", ONSET)\n","            for l in range(len(ONSET)): #for edited onset, calculating regular distance\n","                print (ONSET, ONSET2)\n","                m = ONSET[l]\n","                n = ONSET2[l]\n","                print (m, n)               \n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                COMP.append(diff)\n","                COMPKEY.append(m)\n","        else: #different lengths: if there are no letters in common\n","            CAND1 = MAXSLOT\n","            CAND2 = MINSLOT\n","            print (\"clusters are different lengths with nothing in common: \", CAND1)\n","            print (\"clusters are different lengths with nothing in common: \", CAND2)\n","            for m in CAND1:\n","              for n in CAND2:\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                MAXCOMP.append(diff)\n","                MAXCOMPKEY.append(m)\n","            for counting in range(len(CAND1) - len(CAND2)):\n","              maxdiff = max(MAXCOMP)\n","              loc = MAXCOMP.index(maxdiff)\n","              print (\"Removing phone\", MAXCOMPKEY[loc], \" :\", maxdiff)\n","              print (\"from current onset: \", ONSET)\n","              if MAXCOMPKEY[loc] in ONSET:\n","                ONSET.remove(MAXCOMPKEY[loc])\n","                MAXCOMP.remove(maxdiff)\n","                print (\"Penalty: -10\")\n","                PENALTY.append(10)\n","              print (ONSET)\n","            for l in range(len(ONSET)): #for edited onset, calculating regular distance\n","              print (\"Final onset: \")\n","              print (ONSET, ONSET2)\n","              m = ONSET[l]\n","              n = ONSET2[l]\n","              print (m, n)               \n","              key = str(m)+\",\"+str(n)\n","              print (key)\n","              loc = DIFF_INDEX.index(key)\n","              print (DIFF_ARRAY[loc])\n","              diff = sum(DIFF_ARRAY[loc])\n","              print (\"difference is: \",diff)\n","              COMP.append(diff)\n","              COMPKEY.append(m)\n","    else: #if onsets are same length but different letters\n","            CAND1 = CONS1[m]\n","            CAND2 = CONS2[m]\n","            print (\"clusters are same length but different letters: \", CAND1)\n","            print (\"clusters are same length but different letters: \", CAND2)\n","            for l in range(len(CAND1)):\n","                m = CAND1[l]\n","                n = CAND2[l]\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                COMP.append(diff)\n","                COMPKEY.append(m)\n","\n","### CALCULATE VOWEL SIMILARITY ###\n","vCOMP = []\n","vCOMPKEY = []\n","print (VOWEL1, VOWEL2)\n","for l in range(min(len(VOWEL1), len(VOWEL2))): #for edited onset, calculating regular distance\n","    m = VOWEL1[l]\n","    n = VOWEL2[l]             \n","    key = str(m)+\",\"+str(n)\n","    print (key)\n","    loc = vDIFF_INDEX.index(key)\n","    print (vDIFF_ARRAY[loc])\n","    diff = sum(vDIFF_ARRAY[loc])\n","    print (\"difference is: \",diff)\n","    vCOMP.append(diff)\n","    vCOMPKEY.append(m)\n","\n","###CALCULATE STRESS PENALTIES###\n","DIFF_STRESS=[]\n","STRESS1 = list(map(int, STRESS1))\n","STRESS2 = list(map(int, STRESS2))\n","\n","for i in range(min(len(STRESS1), len(STRESS2))):\n","  sdiff = STRESS1[i] - STRESS2[i]\n","  sdiff = abs(sdiff)\n","  DIFF_STRESS.append(sdiff)\n","\n","print (\" \")\n","print (\"Word-final vowel/consonant deletion penalty: \", sum(SYLL_PENALTY))\n","print (\"Consonant phonetic dissimilarity: \", COMP, \"= total: \", (sum(COMP)))\n","print (\"Consonant deletion penalty: \", sum(PENALTY))\n","print (\"Vowel phonetic dissimilarity: \", vCOMP, \"= total\", (sum(vCOMP)), \"x2: \", (sum(vCOMP)*2))\n","print (\"Stress penalties: \", sum(DIFF_STRESS))\n","print (\"FINAL WEIGHTED DISSIMILARITY: \", (sum(vCOMP)*2)+sum(COMP)+sum(DIFF_STRESS)+sum(PENALTY)+sum(SYLL_PENALTY)) #weight vowels x2"],"metadata":{"id":"4hF3zFToWdhx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["###final version### (backup where I'm not creating a copy of LINE3/LINE5 before parsing into phones)\n","\n","import itertools\n","import numpy as np\n","\n","###CALCULATE CONSONANT DIFFERENCE VALUES###\n","DIFF_ROW=[]\n","DIFF_COL=[]\n","DIFF_ARRAY=[]\n","DIFF_INDEX=[]\n","vectC_file = open('similarityC.txt')\n","for line in vectC_file:     #search through each line in the text file\n","  line=line.strip()\n","  word = line.split(',')\n","  DIFF_ROW.append(word)\n","\n","DIFF_COL = DIFF_ROW.copy()\n","\n","for a in range(len(DIFF_ROW)):\n","   row = np.array(DIFF_ROW[a][1:])\n","   row = list(map(int, row))\n","   for b in range(len(DIFF_COL)):\n","      col = np.array(DIFF_COL[b][1:])\n","      col = list(map(int, col))\n","      raw_diff = np.subtract(row,col)\n","      diff = [abs(ele) for ele in raw_diff]\n","      DIFF_ARRAY.append(diff)\n","      index = str(DIFF_ROW[a][0]) + \",\" + str(DIFF_ROW[b][0])\n","      DIFF_INDEX.append(index)\n","\n","###CALCULATE VOWEL DIFFERENCE VALUES###\n","vDIFF_ROW=[]\n","vDIFF_COL=[]\n","vDIFF_ARRAY=[]\n","vDIFF_INDEX=[]\n","vectV_file = open('similarityV.txt')\n","for line in vectV_file:     #search through each line in the text file\n","  line=line.strip()\n","  word = line.split(',')\n","  vDIFF_ROW.append(word)\n","\n","vDIFF_COL = vDIFF_ROW.copy()\n","\n","for a in range(len(vDIFF_ROW)):\n","   row = np.array(vDIFF_ROW[a][1:])\n","   row = list(map(int, row))\n","   for b in range(len(vDIFF_COL)):\n","      col = np.array(vDIFF_COL[b][1:])\n","      col = list(map(int, col))\n","      raw_diff = np.subtract(row,col)\n","      diff = [abs(ele) for ele in raw_diff]\n","      vDIFF_ARRAY.append(diff)\n","      index = str(vDIFF_ROW[a][0]) + \",\" + str(vDIFF_ROW[b][0])\n","      vDIFF_INDEX.append(index)\n","\n","###INPUT LINE3/LINE5 AND CONVERT TO PHONES###\n","\n","line3 = input('Line 3: ').upper() #convert all input to uppercase to correspond with dictionary\n","line5 = input('Line 5: ').upper()\n","word1 = line3.split()\n","word2 = line5.split()\n","\n","LINE3 = ['unavailable']*len(word1)\n","LINE5 = ['unavailable']*len(word2)\n","NUCLEUS1 = []\n","NUCLEUS2 = []\n","STRESS1 = []\n","STRESS2 = []\n","\n","for n in range(len(word1)):\n","  raw_file = open('dictionary.txt')\n","  for line in raw_file:     #search through each line in the text file\n","    line=line.strip()\n","    word = line.split()\n","    if word1[n] == word[0]:\n","      LINE3[n] = (word[1:])\n","LINE3 = [item for sublist in LINE3 for item in sublist]     #flatten lists of phonemes into single list\n","PHONES3 = LINE3.copy()\n","for h in range(len(LINE3)):   #remove numbers indicating stress for vowel search\n","        if len(LINE3[h]) > 2:\n","          STRESS1.append(LINE3[h][len(LINE3[h])-1:])    #make list of stress values\n","          col = list(map(int, col))\n","          PHONES3[h] = PHONES3[h][:len(LINE3[h])-1]\n","\n","for n in range(len(word2)):\n","  raw_file = open('dictionary.txt')\n","  for line in raw_file:     #search through each line in the text file\n","    line=line.strip()\n","    word = line.split()\n","    if word2[n] == word[0]:\n","      LINE5[n] = (word[1:])\n","LINE5 = [item for sublist in LINE5 for item in sublist]     #flatten lists of phonemes into single list\n","PHONES5 = LINE5.copy()\n","for h in range(len(LINE5)):   #remove numbers indicating stress for vowel search\n","        if len(LINE5[h]) > 2:\n","          STRESS2.append(LINE5[h][len(LINE5[h])-1:])    #make list of stress values\n","          PHONES5[h] = PHONES5[h][:len(LINE5[h])-1]\n","\n","## changes the ER to AH R ##\n","POS=[]\n","for i in range(len(PHONES3)):\n","  if PHONES3[i] == 'ER':\n","    POS.append(i)\n","    PHONES3[i] = 'AH'\n","    count = 1\n","    for i in POS:\n","      PHONES3.insert(i+count,'R')\n","      count = count + 1\n","\n","for i in range(len(PHONES5)):\n","  if PHONES5[i] == 'ER':\n","    POS.append(i)\n","    PHONES5[i] = 'AH'\n","    count = 1\n","    for i in POS:\n","      PHONES5.insert(i+count,'R')\n","      count = count + 1\n","\n","VOWELS = ['AA', 'AE', 'AH', 'AO', 'AW', 'AX', 'AXR', 'AY', 'EH', 'ER', 'EY', 'IH', 'IX', 'IY', 'OW', 'OY', 'UH', 'UW', 'UX']\n","CONSONANTS = ['B', 'CH', 'D', 'DH', 'DX', 'EL', 'EM', 'EN', 'F', 'G', 'HH', 'JH', 'K', 'L', 'M', 'N', 'NG', 'P', 'Q', 'R', 'S', 'SH', 'T', 'TH', 'V', 'W', 'Y', 'Z', 'ZH']\n","CONS1=[]\n","CONS2=[]\n","C_VEC1=[]\n","C_VEC2=[]\n","\n","print (\"Phone list: \", PHONES3,PHONES5)\n","\n","###SEGMENTS INTO SYLLABLES###\n","VOWEL1 = []\n","VOWEL2 = []\n","for i in range(len(PHONES3)):\n","  for vowel in VOWELS:\n","      if PHONES3[i] == vowel:\n","        NUCLEUS1.append(i) #this tells you the position of the vowels so you can segment the syllables\n","        VOWEL1.append(PHONES3[i])  #this creates a list of vowels\n","print (\"vowels list 1: \", VOWEL1)\n","\n","for j in range(len(NUCLEUS1)):\n","      if j == 0 and (NUCLEUS1[0] != 0):  #for the first NUCLEUS1, the syllable is everything up to the NUCLEUS1\n","        syll_start = NUCLEUS1[j]\n","        CONS1.append(PHONES3[:syll_start])\n","      if j != 0:  #for all other nuclei except the last, the syllable is everything up to the present NUCLEUS1 from the previous NUCLEUS1 \n","        syll_start = NUCLEUS1[j-1]\n","        syll_end = NUCLEUS1[j]\n","        CONS1.append(PHONES3[syll_start+1:syll_end])\n","      if NUCLEUS1[j] == max(NUCLEUS1) and NUCLEUS1[j] != len(PHONES3)-1:\n","        syll_start = NUCLEUS1[j]\n","        CONS1.append(PHONES3[syll_start+1:])\n","print (\"consonant list 1: \", CONS1)\n","\n","for i in range(len(PHONES5)):\n","  for vowel in VOWELS:\n","      if PHONES5[i] == vowel:\n","        NUCLEUS2.append(i) #this tells you the position of the vowels so you can segment the syllables\n","        VOWEL2.append(PHONES5[i])  #this creates a list of vowels\n","print (\"vowels list 2: \", VOWEL2)\n","\n","for j in range(len(NUCLEUS2)):\n","      if j == 0 and (NUCLEUS1[0] != 0):  #for the first NUCLEUS2, the syllable is everything up to the NUCLEUS2\n","        syll_start = NUCLEUS2[j]\n","        CONS2.append(PHONES5[:syll_start])\n","      if j != 0:  #for all other nuclei except the last, the syllable is everything up to the present NUCLEUS2 from the previous NUCLEUS2\n","        syll_start = NUCLEUS2[j-1]\n","        syll_end = NUCLEUS2[j]\n","        CONS2.append(PHONES5[syll_start+1:syll_end])\n","      if NUCLEUS2[j] == max(NUCLEUS2) and NUCLEUS2[j] != len(PHONES5)-1:\n","        syll_start = NUCLEUS2[j]\n","        CONS2.append(PHONES5[syll_start+1:])\n","print (\"consonant list 2: \", CONS2)\n","\n","\n","###DELETE EXTRA CONSONANTS AND VOWELS###\n","MINLIST=[]\n","MAXLIST=[]\n","MINLISTV=[]\n","MAXLISTV=[]\n","SYLL_PENALTY = []\n","\n","minlen = min(len(CONS1),len(CONS2))\n","if len(CONS1) == minlen:\n","  MINLIST = CONS1.copy()\n","  MAXLIST = CONS2.copy()\n","else:\n","  MINLIST = CONS2.copy()\n","  MAXLIST = CONS1.copy()\n","\n","minlen = min(len(VOWEL1),len(VOWEL2))\n","if len(VOWEL1) == minlen:\n","  MINLISTV = VOWEL1.copy()\n","  MAXLISTV = VOWEL2.copy()\n","else:\n","  MINLISTV = VOWEL2.copy()\n","  MAXLISTV = VOWEL1.copy()\n","\n","\n","c_penalty = (len(MAXLIST)-len(MINLIST)) * 10\n","if c_penalty > 0:\n","  print (\" \")\n","  print (\"oops--unequal number of consonants. Penalty: \", c_penalty)\n","  SYLL_PENALTY.append(c_penalty)\n","v_penalty = (len(MAXLISTV)-len(MINLISTV)) * 20\n","if v_penalty > 0:\n","  print (\" \")\n","  print (\"oops--unequal number of vowels. Penalty: \" , v_penalty)\n","  SYLL_PENALTY.append(v_penalty)\n","\n","SUM = []\n","KEEPLETTER = []\n","CAND1 = []\n","CAND2 = []\n","COMP = []\n","COMPKEY = []\n","MAXCOMP = []\n","MAXCOMPKEY = []\n","PENALTY=[]\n","\n","for m in range(min(len(CONS1), len(CONS2))):    #make sure your lists are equal length (i.e. same syllables) before you search\n","  if CONS1[m] == CONS2[m]:                      #if onsets the same, no penalty\n","    print (CONS1[m], \"yay!\")\n","  if CONS1[m] != CONS2[m]:   #if onsets are different\n","    print (\"oops--\", CONS1[m], \" isn't equivalent to\", CONS2[m])\n","    if len(CONS1[m]) != len(CONS2[m]): #and they are different lengths:\n","      minlen = min(len(CONS1[m]), len(CONS2[m]))\n","      if len(CONS1[m]) == minlen:\n","        MINSLOT = CONS1[m]\n","        MAXSLOT = CONS2[m]\n","        MAXSLOT = [item for sublist in MAXSLOT for item in sublist]\n","        MINSLOT = [item for sublist in MINSLOT for item in sublist]\n","        ONSET = MAXSLOT.copy()\n","        ONSET2 = MINSLOT.copy()\n","      else:\n","        MINSLOT = CONS2[m]\n","        MAXSLOT = CONS1[m]\n","        MAXSLOT = [item for sublist in MAXSLOT for item in sublist]\n","        MINSLOT = [item for sublist in MINSLOT for item in sublist]\n","        ONSET = MAXSLOT.copy()\n","        ONSET2 = MINSLOT.copy()\n","\n","      DEL_MIN = MINSLOT.copy()    #find out if simple deletion is appropriate\n","      DEL_MAX = MAXSLOT.copy()\n","      COUNT = DEL_MIN.copy()\n","      for i in DEL_MIN: \n","        if i in DEL_MAX:\n","          print (\"match!\", i)\n","          COUNT.remove(i)\n","          PENALTY.append(10)\n","      if len(COUNT) == 0:\n","        print (\"Deletion possible! Penalty: \", sum(PENALTY))\n","      else:                     #if deletion doesn't work and we have to use phonetic similarity:\n","        PENALTY.clear()\n","        print (\"Deletion not possible! Clusters are different lengths with some letters in common\")\n","        for k in MINSLOT:   #different lengths: if there are some letters in common, keep those                           \n","              for l in MAXSLOT:\n","                if k == l:\n","                  print (\"Yes there is \", k, \" in \", MAXSLOT)\n","                  KEEPLETTER.append(k)\n","        if len(KEEPLETTER) > 0:\n","            print (\"non-candidate!: \", KEEPLETTER)\n","            for i in KEEPLETTER:\n","              if i in MAXSLOT:\n","                MAXSLOT.remove(i)\n","                print (\"removed! \", MAXSLOT)\n","                CAND1 = MAXSLOT\n","              if i in MINSLOT:\n","                MINSLOT.remove(i)\n","                print ('removed! ', MINSLOT)\n","                CAND2 = MINSLOT\n","            for m in CAND1:\n","              for n in CAND2:\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                MAXCOMP.append(diff)\n","                MAXCOMPKEY.append(m)\n","            for counting in range(len(CAND1) - len(CAND2)):\n","              print (\"counting: \", counting)\n","              maxdiff = max(MAXCOMP)\n","              loc = MAXCOMP.index(maxdiff)\n","              print (\"Removing phone\", MAXCOMPKEY[loc], \" :\", maxdiff)\n","              print (\"from current onset: \", ONSET)\n","              print (MAXCOMPKEY[loc])\n","              if COMPKEY[loc] in ONSET:\n","                ONSET.remove(COMPKEY[loc])\n","                COMP.remove(maxdiff)\n","                print (\"Penalty: -10\")\n","                PENALTY.append(10)\n","              print (\"New onset\", ONSET)\n","            for l in range(len(ONSET)): #for edited onset, calculating regular distance\n","                print (ONSET, ONSET2)\n","                m = ONSET[l]\n","                n = ONSET2[l]\n","                print (m, n)               \n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                COMP.append(diff)\n","                COMPKEY.append(m)\n","        else: #different lengths: if there are no letters in common\n","            CAND1 = MAXSLOT\n","            CAND2 = MINSLOT\n","            print (\"clusters are different lengths with nothing in common: \", CAND1)\n","            print (\"clusters are different lengths with nothing in common: \", CAND2)\n","            for m in CAND1:\n","              for n in CAND2:\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                MAXCOMP.append(diff)\n","                MAXCOMPKEY.append(m)\n","            for counting in range(len(CAND1) - len(CAND2)):\n","              maxdiff = max(MAXCOMP)\n","              loc = MAXCOMP.index(maxdiff)\n","              print (\"Removing phone\", MAXCOMPKEY[loc], \" :\", maxdiff)\n","              print (\"from current onset: \", ONSET)\n","              if MAXCOMPKEY[loc] in ONSET:\n","                ONSET.remove(MAXCOMPKEY[loc])\n","                MAXCOMP.remove(maxdiff)\n","                print (\"Penalty: -10\")\n","                PENALTY.append(10)\n","              print (ONSET)\n","            for l in range(len(ONSET)): #for edited onset, calculating regular distance\n","              print (\"Final onset: \")\n","              print (ONSET, ONSET2)\n","              m = ONSET[l]\n","              n = ONSET2[l]\n","              print (m, n)               \n","              key = str(m)+\",\"+str(n)\n","              print (key)\n","              loc = DIFF_INDEX.index(key)\n","              print (DIFF_ARRAY[loc])\n","              diff = sum(DIFF_ARRAY[loc])\n","              print (\"difference is: \",diff)\n","              COMP.append(diff)\n","              COMPKEY.append(m)\n","    else: #if onsets are same length but different letters\n","            CAND1 = CONS1[m]\n","            CAND2 = CONS2[m]\n","            print (\"clusters are same length but different letters: \", CAND1)\n","            print (\"clusters are same length but different letters: \", CAND2)\n","            for l in range(len(CAND1)):\n","                m = CAND1[l]\n","                n = CAND2[l]\n","                key = str(m)+\",\"+str(n)\n","                print (key)\n","                loc = DIFF_INDEX.index(key)\n","                print (DIFF_ARRAY[loc])\n","                diff = sum(DIFF_ARRAY[loc])\n","                print (\"difference is: \",diff)\n","                COMP.append(diff)\n","                COMPKEY.append(m)\n","\n","### CALCULATE VOWEL SIMILARITY ###\n","vCOMP = []\n","vCOMPKEY = []\n","print (VOWEL1, VOWEL2)\n","for l in range(min(len(VOWEL1), len(VOWEL2))): #for edited onset, calculating regular distance\n","    m = VOWEL1[l]\n","    n = VOWEL2[l]             \n","    key = str(m)+\",\"+str(n)\n","    print (key)\n","    loc = vDIFF_INDEX.index(key)\n","    print (vDIFF_ARRAY[loc])\n","    diff = sum(vDIFF_ARRAY[loc])\n","    print (\"difference is: \",diff)\n","    vCOMP.append(diff)\n","    vCOMPKEY.append(m)\n","\n","###CALCULATE STRESS PENALTIES###\n","DIFF_STRESS=[]\n","STRESS1 = list(map(int, STRESS1))\n","STRESS2 = list(map(int, STRESS2))\n","\n","for i in range(min(len(STRESS1), len(STRESS2))):\n","  sdiff = STRESS1[i] - STRESS2[i]\n","  sdiff = abs(sdiff)\n","  DIFF_STRESS.append(sdiff)\n","\n","print (\" \")\n","print (\"Word-final vowel/consonant deletion penalty: \", sum(SYLL_PENALTY))\n","print (\"Consonant phonetic dissimilarity: \", COMP, \"= total: \", (sum(COMP)))\n","print (\"Consonant deletion penalty: \", sum(PENALTY))\n","print (\"Vowel phonetic dissimilarity: \", vCOMP, \"= total\", (sum(vCOMP)), \"x2: \", (sum(vCOMP)*2))\n","print (\"Stress penalties: \", sum(DIFF_STRESS))\n","print (\"FINAL WEIGHTED DISSIMILARITY: \", (sum(vCOMP)*2)+sum(COMP)+sum(DIFF_STRESS)+sum(PENALTY)+sum(SYLL_PENALTY)) #weight vowels x2"],"metadata":{"id":"wwRQH7-bc7w4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668801966031,"user_tz":300,"elapsed":5224,"user":{"displayName":"Vanessa Sheu","userId":"09796642928287019619"}},"outputId":"de07c1fa-2c57-45bc-9dd8-5fe617e017e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Line 3: meet me\n","Line 5: utah\n","Phones list:  ['M', 'IY', 'T', 'M', 'IY'] ['Y', 'UW', 'T', 'AO']\n","vowels list 1:  ['IY', 'IY']\n","consonant list 1:  [['M'], ['T', 'M']]\n","vowels list 2:  ['UW', 'AO']\n","consonant list 2:  [['Y'], ['T']]\n","oops-- ['M']  isn't equivalent to ['Y']\n","clusters are same length but different letters:  ['M']\n","clusters are same length but different letters:  ['Y']\n","M,Y\n","[6, 10, 0, 0]\n","difference is:  16\n","oops-- ['T', 'M']  isn't equivalent to ['T']\n","match! T\n","Deletion possible! Penalty:  10\n","['IY', 'IY'] ['UW', 'AO']\n","IY,UW\n","[0, 4, 0, 0]\n","difference is:  4\n","IY,AO\n","[1, 4, 1, 0]\n","difference is:  6\n"," \n","Word-final vowel/consonant deletion penalty:  0\n","Consonant phonetic dissimilarity:  [16] = total:  16\n","Consonant deletion penalty:  10\n","Vowel phonetic dissimilarity:  [4, 6] = total 10 x2:  20\n","Stress penalties:  1\n","FINAL WEIGHTED DISSIMILARITY:  47\n"]}]}]}